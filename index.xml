<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sysfig</title><link>https://sysfig.dev/</link><description>Recent content on sysfig</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sun, 12 Feb 2023 15:28:49 -0800</lastBuildDate><atom:link href="https://sysfig.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://sysfig.dev/series/cross-tab-sync/intro/</link><pubDate>Sun, 12 Feb 2023 15:28:49 -0800</pubDate><guid>https://sysfig.dev/series/cross-tab-sync/intro/</guid><description>https://html.spec.whatwg.org/multipage/web-messaging.html
polling emitting events Channel Messaging API MessageChannel Broadcast Channel API https://developer.chrome.com/blog/broadcastchannel/ https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API Service Worker IndexedDB Observer API - https://github.com/WICG/indexed-db-observers/blob/gh-pages/EXPLAINER.md</description></item><item><title>Introduction</title><link>https://sysfig.dev/series/browser-storage/intro/</link><pubDate>Sat, 11 Feb 2023 17:20:43 -0800</pubDate><guid>https://sysfig.dev/series/browser-storage/intro/</guid><description>IndexedDB is an transactional, key-value, object-oriented database system capable of storing a large amount of data persistently inside a user&amp;rsquo;s browser.</description></item><item><title>Web Storage API</title><link>https://sysfig.dev/series/browser-storage/web-storage-api/</link><pubDate>Sat, 11 Feb 2023 17:20:43 -0800</pubDate><guid>https://sysfig.dev/series/browser-storage/web-storage-api/</guid><description>The Web Storage API is a web API, maintained by https://whatwg.org/, for storing string-only key-value pairs locally in the browser.
The Web Storage API provides two ways to store data - localStorage and sessionStorage. Both using the same API, but differs in how long the data persists for.
Data stored in sessionStorage persists only for that session, which is tied to a particular tab or window. If you open the same page on a new tab or window, that new tab/window is a new and completely different session, and have its own sessionStorage storage.</description></item><item><title>Core Concepts</title><link>https://sysfig.dev/series/browser-storage/concepts/</link><pubDate>Sat, 11 Feb 2023 17:03:33 -0800</pubDate><guid>https://sysfig.dev/series/browser-storage/concepts/</guid><description>Origins, Databases, Object Stores, Values, Keys, and Indexes Each origin (e.g. https://example.com) can have its own set of IndexedDB databases. Each database is identified with a name that is unique for that origin. Within each database is one of more object stores, which is where you store the actual data. Each object store must have a name that unique within the database.
You can think of an object store akin to a &amp;rsquo;table&amp;rsquo; in a relational database, or &amp;lsquo;collections&amp;rsquo; in MongoDB.</description></item><item><title>E2E Tests are the Most Important</title><link>https://sysfig.dev/series/hobgoblins-of-little-minds/e2e-tests-most-important/</link><pubDate>Mon, 04 Jan 2021 07:26:25 -0800</pubDate><guid>https://sysfig.dev/series/hobgoblins-of-little-minds/e2e-tests-most-important/</guid><description>End-to-End (E2E) tests are the most important tests for a piece of software because they are the technical implementation of the contract between the software creator and its users. If all your E2E tests pass, then the contract is fulfilled.
Linus Torvalds, the creator and maintainer of Linux, one of the biggest open-source projects, famously said &amp;ldquo;WE DO NOT BREAK USERSPACE!&amp;rdquo; (an opinion which he consistently expresses). He values:
Not breaking the contract between the kernel and user-space programs Don&amp;rsquo;t make changes to the contact that&amp;rsquo;s incompatible with previous contracts Now, I&amp;rsquo;d bet the software you&amp;rsquo;re writing have fewer dependents than the Linux kernel, and you can change the contract more freely, but the purpose of this article is to drill home the point that you should not break contracts.</description></item><item><title>The Allure of New</title><link>https://sysfig.dev/series/hobgoblins-of-little-minds/allure-of-new/</link><pubDate>Thu, 31 Dec 2020 21:02:44 -0800</pubDate><guid>https://sysfig.dev/series/hobgoblins-of-little-minds/allure-of-new/</guid><description>People like new things.
When a developer sees a new technology (let&amp;rsquo;s call it X) on a job description page, or noticed X popping up as a topic on recent Meetups, they may try to convince their managers to use it at work so they can learn it and have experience with it. I mean, who doesn&amp;rsquo;t want 12 years of Kubernetes experience? (You got to get in early!)
But using new technologies is risky.</description></item><item><title>There are No Gods</title><link>https://sysfig.dev/series/hobgoblins-of-little-minds/there-are-no-gods/</link><pubDate>Thu, 31 Dec 2020 17:39:12 -0800</pubDate><guid>https://sysfig.dev/series/hobgoblins-of-little-minds/there-are-no-gods/</guid><description>In many of the companies I&amp;rsquo;ve worked at, there was often one or two developers that everyone hails as an untouchable God with a gifted mind for code. They are usually one of the early hires who&amp;rsquo;ve established a reputation and newcomers just accept it as fact.
Most of the time, this God perception is formed because colleagues are afraid to ask them questions. And they don&amp;rsquo;t ask questions, more often than not, because there&amp;rsquo;s a culture that sees asking (potentially &amp;lsquo;dumb&amp;rsquo;) questions as a sign of weakness.</description></item><item><title>10% Done</title><link>https://sysfig.dev/series/hobgoblins-of-little-minds/10-percent-done/</link><pubDate>Thu, 31 Dec 2020 16:31:04 -0800</pubDate><guid>https://sysfig.dev/series/hobgoblins-of-little-minds/10-percent-done/</guid><description>We often talk about the goal of software engineering as &amp;ldquo;writing applications that work&amp;rdquo;. But, in truth, that&amp;rsquo;s only 10% of it.
It&amp;rsquo;s easy to write a simple clone of Facebook, Amazon, or Airbnb on your own and deploy it on server; but it&amp;rsquo;s difficult to develop a system where many developers can work together effortlessly (distributed version control, code review pair programming), where new features can be added, tested, and deployed quickly (continuous integration, continuous deployment), where developers can be confident things work (tests), where bugs can be detected and resolved quickly (logging, monitoring), where a new developer joining the project can get up to speed quickly (documentation), where the code is performant (benchmarking).</description></item><item><title>Projects</title><link>https://sysfig.dev/projects/</link><pubDate>Sun, 27 Dec 2020 20:58:45 -0800</pubDate><guid>https://sysfig.dev/projects/</guid><description> Building Enterprise JavaScript Applications (BEJA) Internal Developer Platform on AWS</description></item><item><title>Now</title><link>https://sysfig.dev/now/</link><pubDate>Wed, 09 Dec 2020 20:48:46 -0800</pubDate><guid>https://sysfig.dev/now/</guid><description>This is a now page.
Writing a liveProject series for Manning related to CDK for Terraform, TypeScript, and AWS Learning about digital marketing, AppsFlyer, and Mixpanel</description></item><item><title/><link>https://sysfig.dev/series/browser-storage/z99_comparison/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/browser-storage/z99_comparison/</guid><description>https://web.dev/storage-for-the-web/
Cookies pros:
Convenience - values are automatically sent to the server on every request Cookies cons:
Values are automatically sent to the server on every request Web API storage Pros:
Can store a relatively large amount of data (5MB per domain in Chrome, 3MB in Opera) Web API storage Cons:
Synchronous Can only store strings; other data types must be serialized and deserialized to another format. For example, you may be able to store objects as JSON using JSON.</description></item></channel></rss>