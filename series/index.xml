<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Series on sysfig</title><link>https://sysfig.dev/series/</link><description>Recent content in Series on sysfig</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 04 Jan 2021 07:26:25 -0800</lastBuildDate><atom:link href="https://sysfig.dev/series/index.xml" rel="self" type="application/rss+xml"/><item><title>End-to-End Tests</title><link>https://sysfig.dev/series/golang/end-to-end-e2e-tests/</link><pubDate>Mon, 04 Jan 2021 07:24:21 -0800</pubDate><guid>https://sysfig.dev/series/golang/end-to-end-e2e-tests/</guid><description/></item><item><title>Useful Packages</title><link>https://sysfig.dev/series/golang/useful-packages/</link><pubDate>Thu, 31 Dec 2020 16:32:40 -0800</pubDate><guid>https://sysfig.dev/series/golang/useful-packages/</guid><description> fatih/color - makes using ANSI Escape Codes in Go easier</description></item><item><title>Introduction</title><link>https://sysfig.dev/series/golang/introduction/</link><pubDate>Wed, 30 Dec 2020 00:00:57 -0800</pubDate><guid>https://sysfig.dev/series/golang/introduction/</guid><description>Go is an open-source, general-purpose programming language designed by Google. It is typically compiled.</description></item><item><title>Testing</title><link>https://sysfig.dev/series/golang/testing/</link><pubDate>Wed, 30 Dec 2020 00:00:57 -0800</pubDate><guid>https://sysfig.dev/series/golang/testing/</guid><description>Go&amp;rsquo;s standard library contains a testing package, which provides support for automated testing of Go packages. You define test routines and use the built-in go test command to run them.
The go tool also provides commands for benchmarking and code coverage.</description></item><item><title>Testing Basics</title><link>https://sysfig.dev/series/golang/testing-basics/</link><pubDate>Wed, 30 Dec 2020 00:00:57 -0800</pubDate><guid>https://sysfig.dev/series/golang/testing-basics/</guid><description>Let&amp;rsquo;s say we have an exported function called Factorial in math.go
package math // Factorial - Get the factorial of a positive integer func Factorial(n int) uint64 { if n &amp;lt; 2 { return 1 } return uint64(n) * Factorial(n-1) } We can write a unit test for it in the same package (i.e. same directory) without importing it. The name of the file should end in _test.go (e.g. math_test.go). Any files named with the _test.</description></item><item><title/><link>https://sysfig.dev/series/c++/z00_dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/c++/z00_dump/</guid><description/></item><item><title/><link>https://sysfig.dev/series/c++/z00_testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/c++/z00_testing/</guid><description>googletest https://github.com/google/googletest https://github.com/google/googletest/blob/master/googletest/docs/primer.md#test-fixtures-using-the-same-data-configuration-for-multiple-tests</description></item><item><title/><link>https://sysfig.dev/series/c++/z99_abseil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/c++/z99_abseil/</guid><description>https://github.com/abseil/abseil-cpp</description></item><item><title/><link>https://sysfig.dev/series/golang/t99_dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/t99_dump/</guid><description>Testing Multiple Scenarios It&amp;rsquo;s good practice to have one test routine for one function. ??How does different scenarios of the same test work then??
sub-tests
Integration Testing go help test go help testflag - flags that control execution of the test
go help testfunc
Test Data The go tool will ignore any directories named testdata, which we can use to hold test data.
file, err := os.Open(&amp;#34;./testdata/users.csv&amp;#34;) if err != nil { log.</description></item><item><title/><link>https://sysfig.dev/series/golang/z99_black-vs-white-box-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/z99_black-vs-white-box-testing/</guid><description>If you test code is in the same package as the functions you are testing, then your test code is able to access all the private (non-exported) methods. This allows you to perform blackbox unit testing on every unit in your package.
You can also have some other tests that tests the public methods and interface that it exposes. These tests should be in a different package (usually named &amp;lt;package&amp;gt;_test) to the package you are testing because you want to test it as if your test package is a third-party package, without access to the private methods.</description></item><item><title/><link>https://sysfig.dev/series/golang/z99_dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/z99_dump/</guid><description>Show what assembly Go produces with your code go tool objdump app.test &amp;gt; app.asm</description></item><item><title/><link>https://sysfig.dev/series/golang/z99_error-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/z99_error-handling/</guid><description>https://blog.golang.org/error-handling-and-go</description></item><item><title/><link>https://sysfig.dev/series/golang/z99_go-vet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/z99_go-vet/</guid><description>go vet
Find significant problems with a package and its test code.
Only a subset of high-confidence checks are performed on test code: &amp;lsquo;atomic&amp;rsquo;, &amp;lsquo;bool&amp;rsquo;, &amp;lsquo;buildtags&amp;rsquo;, &amp;lsquo;errorsas&amp;rsquo;, &amp;lsquo;ifaceassert&amp;rsquo;, &amp;lsquo;nilfunc&amp;rsquo;, &amp;lsquo;printf&amp;rsquo;, and &amp;lsquo;stringintconv&amp;rsquo;.
go doc cmd/vet</description></item><item><title/><link>https://sysfig.dev/series/golang/z99_memory-concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/z99_memory-concurrency/</guid><description>Memory
heap - global, dynamically allocated stack - local to the scope of the function Go manages memory allocation automatically. There&amp;rsquo;s no mechanism for manual memory allocation.
Stack allocation is cheap because it requires only two CPU instructions:
push onto the stack for allocation release from the stack Because the variable ??, the lifetime and memory requirements of variable on the stack can be determined at compile time?</description></item><item><title/><link>https://sysfig.dev/series/golang/z99_modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/z99_modules/</guid><description>Modules can contain more than one package</description></item><item><title/><link>https://sysfig.dev/series/golang/z99_parallelizing-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sysfig.dev/series/golang/z99_parallelizing-tests/</guid><description>t.Parallel()
https://github.com/golang/go/wiki/TableDrivenTests#parallel-testing</description></item></channel></rss>