<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Generate Static Sites with Hugo on sysfig</title><link>https://sysfig.dev/series/static-sites-with-hugo/</link><description>Recent content in Generate Static Sites with Hugo on sysfig</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 14 Dec 2020 17:03:39 -0800</lastBuildDate><atom:link href="https://sysfig.dev/series/static-sites-with-hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding Styles with Sass</title><link>https://sysfig.dev/series/static-sites-with-hugo/adding-styles-with-sass/</link><pubDate>Wed, 16 Dec 2020 15:24:30 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/adding-styles-with-sass/</guid><description>We have a working site, but it&amp;rsquo;s not very pretty nor user-friendly. What it needs is some styles to keep the elements aligned and organized.
The simplest way to add styles to the site is to create a CSS stylesheet inside the static/ directory (e.g. static/style.css), and add a &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/style.css&amp;quot;&amp;gt; to the &amp;lt;head&amp;gt; element.
Next, we should also add a logo to the site. We could place it in static/img/, but then we&amp;rsquo;re mixing up the images that we add to posts to the images that are used for styles.</description></item><item><title>Creating Series List Page</title><link>https://sysfig.dev/series/static-sites-with-hugo/series-list-page/</link><pubDate>Wed, 16 Dec 2020 14:44:02 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/series-list-page/</guid><description>Our fifth constraint is that &amp;lsquo;/series/ should list out a list of series pages, but not the series posts&amp;rsquo;. So let&amp;rsquo;s create a layout for list pages within the series section.
{{ define &amp;#34;main&amp;#34; }} &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; &amp;lt;div class=&amp;#34;page-content&amp;#34;&amp;gt;{{ .Content }}&amp;lt;/div&amp;gt; {{ range .Pages }} {{ if and .IsSection (not (eq .CurrentSection.Title &amp;#34;Series&amp;#34;)) }} &amp;lt;div class=&amp;#34;series-list-item&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;series-list-item__meta&amp;#34;&amp;gt;// {{ .Date.Format &amp;#34;2 Jan 06&amp;#34; }} &amp;amp;bullet; {{ range .Params.tags }} &amp;lt;div class=&amp;#34;tag&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;/tags/{{ .</description></item><item><title>Creating Series Page</title><link>https://sysfig.dev/series/static-sites-with-hugo/series-page/</link><pubDate>Tue, 15 Dec 2020 21:24:44 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/series-page/</guid><description>Let&amp;rsquo;s tackle our third constraint next - every series should have its own series page at /series/&amp;lt;series-name&amp;gt;/ and it should show a list of all posts that belong to it.
I&amp;rsquo;d imagine a series page is going to look a lot different from a post page, with different kind of metadata, so let&amp;rsquo;s create a new archetype for series. Create a new archetype at archetypes/series.md with the following content:
--- title: {{ replace .</description></item><item><title>Overriding Archetype</title><link>https://sysfig.dev/series/static-sites-with-hugo/overriding-archetype/</link><pubDate>Tue, 15 Dec 2020 20:51:16 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/overriding-archetype/</guid><description>With picking the right archetype, we can use the --kind option to specify the content type to create.
There&amp;rsquo;s some inconsistency here with how the --kind option is named. It really should be named --type since it is used to specify content type. Page kinds should only used to mean one of home, regular page, section, taxonomy, taxonomy term).
Delete the test file we created earlier and use the hugo new command with the --kind option to recreate it.</description></item><item><title>Cascading Content Type</title><link>https://sysfig.dev/series/static-sites-with-hugo/cascading-content-type/</link><pubDate>Tue, 15 Dec 2020 20:49:54 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/cascading-content-type/</guid><description>We could manually add type: posts to the archetype but this makes maintainance difficult - imagine if we want to change the type for thousands of series pages (even though we could do a directory-global find-and-replace, it&amp;rsquo;ll look real bad when doing code reviews).
Avoid adding type to the archetype. A page&amp;rsquo;s content type should, most of the time, be determined from its file location; use type to override only in special cases.</description></item><item><title>Setting URLs</title><link>https://sysfig.dev/series/static-sites-with-hugo/setting-urls/</link><pubDate>Tue, 15 Dec 2020 16:52:29 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/setting-urls/</guid><description>There are multiple ways to fulfil our first constraint - Posts within a series should have the URL path /series/&amp;lt;series-name&amp;gt;/&amp;lt;post-slug&amp;gt;:
Approach: Use filename directory structure
By default, a page&amp;rsquo;s URL path reflects its filename and the directory structure it is found in. Therefore, we can simply place posts that should be within a series inside the content/series/&amp;lt;series-name&amp;gt;/ directory.
Advantages:
It&amp;rsquo;s simple to implement. Doing so will fulfil our second constraint (Posts in a series should not appear on the /posts list page).</description></item><item><title>Other Uses of Taxonomy</title><link>https://sysfig.dev/series/static-sites-with-hugo/taxonomy-use-cases/</link><pubDate>Tue, 15 Dec 2020 16:11:04 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/taxonomy-use-cases/</guid><description>We are only using one taxonomy here (tags), so let&amp;rsquo;s update our site configuration (config.yaml) to make that explicit.
... taxonomies: tag: tags This will prevent categories from becoming a taxonomy, and prevents Hugo from generating a /categories/ page.
Taxonomies are useful, you may want to consider using taxonomies to group:
different categories of posts (e.g. tutorial, analysis, announcement, review) by author</description></item><item><title>Adding Links to Tag Pages</title><link>https://sysfig.dev/series/static-sites-with-hugo/linking-tag-pages/</link><pubDate>Tue, 15 Dec 2020 16:10:37 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/linking-tag-pages/</guid><description>Now we that there is a taxonomy term listing page for for each tag, let&amp;rsquo;s go back to our list and single page layouts and add links to them.
Go to layouts/_default/list.html and layouts/posts/single.html and surround the {{ . }} block with an &amp;lt;a&amp;gt; tag.</description></item><item><title>Overriding Default List Layout</title><link>https://sysfig.dev/series/static-sites-with-hugo/overriding-default-list-layout/</link><pubDate>Tue, 15 Dec 2020 16:09:29 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/overriding-default-list-layout/</guid><description>We can also go to the taxonomy list page (i.e. /tags/) to see a list of all tags, but it doesn&amp;rsquo;t look quite right. It&amp;rsquo;s also using the layouts/_default/list.html layout, but that layout is meant for posts, not tags (or any type of taxonomy terms), so let&amp;rsquo;s create a more specific layout for our tags.
If we look at the Hugo&amp;rsquo;s Lookup Order documentation, we can see that the layouts/_default/list.html can be overriden on the taxonomy list page with a file at layouts/tags/terms.</description></item><item><title>Introducing Taxonomies</title><link>https://sysfig.dev/series/static-sites-with-hugo/taxonomies/</link><pubDate>Tue, 15 Dec 2020 16:08:54 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/taxonomies/</guid><description>We are now able to display a single blog post as well as a listing of blog posts. But what if I am only interested in blog posts about the web? Would I be able to only get a listing of posts with the web tag?
Yes, you can - with taxonomies.
Taxonomies are user-defined groupings of content. For our use case, we&amp;rsquo;d like to group our posts by their tags front matter property.</description></item><item><title>Adding Content to Section List Pages</title><link>https://sysfig.dev/series/static-sites-with-hugo/adding-content-to-section-list-pages/</link><pubDate>Tue, 15 Dec 2020 16:08:36 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/adding-content-to-section-list-pages/</guid><description>Remember that _index.md is the name of the content file for page with an empty path; so to add some free form content to the /posts/ list page, we can create a new content file at content/posts/_index.md with the following disclaimer.
--- title: Posts --- The list below shows only standalone posts; posts which are part of a series are not listed here. Then, to display it, add a &amp;lt;div class=&amp;quot;page-content&amp;quot;&amp;gt;{{ .</description></item><item><title>Understanding Sorting in Lists</title><link>https://sysfig.dev/series/static-sites-with-hugo/list-sorting/</link><pubDate>Tue, 15 Dec 2020 16:07:57 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/list-sorting/</guid><description>Currently, we only have a single post in our section list page. But what order will posts appear in when we add more? Ideally, we want our posts to be sorted in reverse chronological order, so that the latest posts appear first.
First, let&amp;rsquo;s create a new post with a different date.
hugo new posts/what-is-a-mac-address.md Once again, the content file will be generated from the posts archetype.
--- title: &amp;quot;What Is a Mac Address&amp;quot; date: 2020-12-13T16:26:35-08:00 draft: true tags: - web - devops - linux - programming --- Open the content file, add in some dummy content, and modify the front matter, ensuring the date front matter variable uses a different date to our other article.</description></item><item><title>Adding Posts List Layout</title><link>https://sysfig.dev/series/static-sites-with-hugo/posts-list-layout/</link><pubDate>Tue, 15 Dec 2020 16:07:31 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/posts-list-layout/</guid><description>We can reach individual posts by going to http://localhost:1313/posts/&amp;lt;name&amp;gt; but what if want to see a list of all posts? If you try http://localhost:1313/posts/, you&amp;rsquo;ll be served a blank page because there is no content file or layout file for the section list page (layouts/index.html only works for the home page and layouts/_default/single.html only works for single pages).
We can create a list layout at layouts/_default/list.html that acts as the default list layout.</description></item><item><title>Adding Metadata to Post Page</title><link>https://sysfig.dev/series/static-sites-with-hugo/post-page-metadata/</link><pubDate>Tue, 15 Dec 2020 16:07:02 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/post-page-metadata/</guid><description>The post page uses the layouts/_default/single.html page, which displays only the title and content. Some information from the post is lost, such as the date and tags.
So let&amp;rsquo;s create a more specific layout for single pages in the posts section by creating a new layout file at layouts/posts/single.html with the following content:
{{ define &amp;#34;main&amp;#34; }} &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; &amp;lt;div class=&amp;#34;post__meta&amp;#34;&amp;gt;// {{ .Date.Format &amp;#34;2 Jan 06&amp;#34; }} &amp;amp;bullet; {{ range .</description></item><item><title>Creating Post from Archetype</title><link>https://sysfig.dev/series/static-sites-with-hugo/post-from-archetypes/</link><pubDate>Tue, 15 Dec 2020 16:06:19 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/post-from-archetypes/</guid><description>Let&amp;rsquo;s create a our first post about password hashing. You can do that by running hugo new posts/what-is-password-hashing.md. Because the path starts with posts/, Hugo will know to use the posts archetype.
This will create a content file at content/posts/what-is-password-hashing.md with the following content:
--- title: &amp;#34;What Is Password Hashing&amp;#34; date: 2020-12-12T16:58:14-08:00 draft: &amp;lt;mark&amp;gt;false&amp;lt;/mark&amp;gt; tags: - web - devops - linux - programming --- Let&amp;rsquo;s make a few small changes to the front matter and add our actual blog post content.</description></item><item><title>Creating Posts Archetype</title><link>https://sysfig.dev/series/static-sites-with-hugo/posts-archetypes/</link><pubDate>Tue, 15 Dec 2020 16:05:54 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/posts-archetypes/</guid><description>We should create an archetype for posts because we want all our posts to have the same set of fields in the front matter. Create a new archetype at archetypes/posts.md with the following content:
--- title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34; date: {{ .Date }} draft: true tags: - web - devops - linux - programming --- This is similar to archetypes/default.md with an extra field called tags.</description></item><item><title>Using Base Templates and Blocks</title><link>https://sysfig.dev/series/static-sites-with-hugo/base-templates-blocks/</link><pubDate>Tue, 15 Dec 2020 16:05:18 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/base-templates-blocks/</guid><description>We&amp;rsquo;ve componentized most of the layouts into partials, but the layout themselves look almost identical to each other.
layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;{{ .Site.LanguageCode }}&amp;#34;&amp;gt; {{- partial &amp;#34;head.html&amp;#34; . -}} &amp;lt;body&amp;gt; {{- partial &amp;#34;header.html&amp;#34; . -}} &amp;lt;main&amp;gt; &amp;lt;div class=&amp;#34;page-content&amp;#34;&amp;gt;{{ .Content }}&amp;lt;/div&amp;gt; &amp;lt;/main&amp;gt; {{- partial &amp;#34;footer.html&amp;#34; . -}} &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;{{ .Site.LanguageCode }}&amp;#34;&amp;gt; {{- partial &amp;#34;head.html&amp;#34; . -}} &amp;lt;body&amp;gt; {{- partial &amp;#34;header.html&amp;#34; . -}} &amp;lt;main&amp;gt; &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;{{ .</description></item><item><title>Pulling Out the Header and Footer</title><link>https://sysfig.dev/series/static-sites-with-hugo/header-footer-partials/</link><pubDate>Tue, 15 Dec 2020 16:04:49 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/header-footer-partials/</guid><description>Let&amp;rsquo;s take our layouts/index.html.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;{{ .Site.LanguageCode }}&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;title&amp;gt;{{ .Site.Title }}&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;a href=&amp;#34;/&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/series&amp;#34;&amp;gt;Series&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/posts&amp;#34;&amp;gt;Posts&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/projects&amp;#34;&amp;gt;Projects&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;/about&amp;#34;&amp;gt;About&amp;lt;/a&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;main&amp;gt; &amp;lt;div class=&amp;#34;page-content&amp;#34;&amp;gt;{{ .Content }}&amp;lt;/div&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;footer&amp;gt;sysfig.dev &amp;amp;copy; {{ time.Now.Year }}&amp;lt;/footer&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; The header and footer are the same for all pages, so let&amp;rsquo;s extract them into a partial.
Create a new file at layouts/partials/header.</description></item><item><title>Pulling Out the Head Element</title><link>https://sysfig.dev/series/static-sites-with-hugo/head-partial/</link><pubDate>Tue, 15 Dec 2020 16:04:24 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/head-partial/</guid><description>Next, let&amp;rsquo;s extract the &amp;lt;head&amp;gt; element from both layouts into its own partial. This is slightly more complicated than with the header and footer because the &amp;lt;title&amp;gt; element within the &amp;lt;head&amp;gt; is different for different layouts. With layouts/index.html, it&amp;rsquo;s &amp;lt;title&amp;gt;{{ .Site.Title }}&amp;lt;/title&amp;gt;; with layouts/_default/single.html, it&amp;rsquo;s &amp;lt;title&amp;gt;{{ .Title }} - {{ .Site.Title }}&amp;lt;/title&amp;gt;.
To make it easier for us, let&amp;rsquo;s assume that the &amp;lt;title&amp;gt; element will be {{ .Site.Title }} only for the home page, and {{ .</description></item><item><title>Pulling Out Common Elements into Partials</title><link>https://sysfig.dev/series/static-sites-with-hugo/partials/</link><pubDate>Tue, 15 Dec 2020 15:28:03 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/partials/</guid><description>Now that our home and About pages are working, let&amp;rsquo;s do some refactoring and remove duplication from our code.
Our layouts/index.html and layouts/_default/single.html shares a lot of code. In fact, they differ only on a couple of lines. Just like you&amp;rsquo;d extract common logic in code and abstract them into a function or module, we can extract common HTML elements from the layouts template into re-usable HTML component templates called partials.</description></item><item><title>Understanding Content Section</title><link>https://sysfig.dev/series/static-sites-with-hugo/understanding-content-section/</link><pubDate>Tue, 15 Dec 2020 15:27:41 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/understanding-content-section/</guid><description>A [section](https://gohugo.io/content-management/sections/ in Hugo is a collection of content pages grouped by directory structure. For example, if we have a directory at content/posts/, then posts would be a section. First-level directories under content/ are called root sections.
You can have sections within sections (i.e. nested sections) by creating additional directories within the first-level directories, but these non-root sections need to contain an _index.md file.
Remember that the structure of the content/ directory reflects the structure of the URL path in the site.</description></item><item><title>Drafts</title><link>https://sysfig.dev/series/static-sites-with-hugo/drafts/</link><pubDate>Tue, 15 Dec 2020 15:27:30 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/drafts/</guid><description>Start the Hugo development server by running hugo server and go to http://localhost:1313/about/. Contrary to our expectations, it&amp;rsquo;s displaying a page that reads 404 page not found. So what&amp;rsquo;s wrong?
If we look at our content/about.md content file, we&amp;rsquo;ll find a front matter value of draft: true. draft is one of the many predefined variables that carries a special meaning with Hugo (title and date are also predefined variables). All content with draft set to true will not be rendered (unless overriden using the --buildDrafts option to the hugo command).</description></item><item><title>Understanding Hugo's Lookup Order</title><link>https://sysfig.dev/series/static-sites-with-hugo/hugo-lookup-order/</link><pubDate>Tue, 15 Dec 2020 15:27:30 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/hugo-lookup-order/</guid><description>Circling back to creating our About page, we need to create a layout file that can match with the content/about.md content file. We need to create that file at a location that satisfies Hugo&amp;rsquo;s layout lookup rules. You can find the full lookup order at Hugo&amp;rsquo;s Lookup Order, but the abridged version can be summed up as:
layouts/&amp;lt;type&amp;gt;/&amp;lt;kind&amp;gt;.html layouts/_default/&amp;lt;kind&amp;gt;.html - for pages that are not part of a section, or when the section has not defined its own layout So to create a layout for the About page (which is not part of any sections), we can create a file at layouts/_default/single.</description></item><item><title>Different Kinds of Pages</title><link>https://sysfig.dev/series/static-sites-with-hugo/page-kinds/</link><pubDate>Tue, 15 Dec 2020 15:25:25 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/page-kinds/</guid><description>But what happens when a user hits the URL &amp;lt;host&amp;gt;/posts/? Typically, this page would be a chronological index/listing of all posts on the site. Hugo makes a distinction between these kinds of list pages as opposed to the regular single page (e.g. About, Terms, or a blog post).
There are different kinds of list pages - home page, section listing, taxonomy lists, and taxonomy terms. The page at &amp;lt;host&amp;gt;/posts/ would be a type of section listing.</description></item><item><title>Creating an About Page</title><link>https://sysfig.dev/series/static-sites-with-hugo/creating-about-page/</link><pubDate>Tue, 15 Dec 2020 15:24:46 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/creating-about-page/</guid><description>We&amp;rsquo;ll soon polish up the home page by adding some styling and pazazz to it. But before that, let&amp;rsquo;s finish up laying out the structure of our site by adding more pages to the site. We&amp;rsquo;ll start with the &amp;lsquo;About&amp;rsquo; page.
Just as with the home page, we start by creating a content file. But instead of manually creating the file yourself, let&amp;rsquo;s use the hugo new command.
hugo new about.</description></item><item><title>Previewing the Site with the Development Server</title><link>https://sysfig.dev/series/static-sites-with-hugo/previewing-site-with-development-server/</link><pubDate>Tue, 15 Dec 2020 15:24:24 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/previewing-site-with-development-server/</guid><description>It&amp;rsquo;s not possible to serve our site by running a web server (like NGINX or Apache HTTP server) with public/ as the site root. However, running a web server in the background and re-running hugo on every change can tiresome.
Hugo provides a fast development server that will watch for changes in your code, automatically rebuild the site, store the result in memory, and server it at the local host address (defaults to port 1313).</description></item><item><title>Generating the Static Site</title><link>https://sysfig.dev/series/static-sites-with-hugo/generating-static-site/</link><pubDate>Tue, 15 Dec 2020 15:23:55 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/generating-static-site/</guid><description>With the layouts/index.html and content/_index.md files in place, we are now ready to combine them to create the home page. At the root of your repository, run hugo.
hugo Start building sites … | EN -------------------+----- Pages | 4 Paginator pages | 0 Non-page files | 0 Static files | 2 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 12 ms You&amp;rsquo;ll find a new public/ directory containing the contents of the generated static site.</description></item><item><title>Implementing Custom Filename Conventions</title><link>https://sysfig.dev/series/static-sites-with-hugo/custom-filename-conventions/</link><pubDate>Tue, 15 Dec 2020 11:02:02 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/custom-filename-conventions/</guid><description>Currently, the series posts are sorted alphabetically in my editor by their filenames, whilst on the site, they are sorted by date.
The easiest way to achieve the fourth constraint (Series posts should display in the correct order on the site and in the editor) is implement a filenaming convention where series posts that should come first are first alphabetically. We can then order posts on the site using the underlying file&amp;rsquo;s name.</description></item><item><title>Series</title><link>https://sysfig.dev/series/static-sites-with-hugo/series/</link><pubDate>Tue, 15 Dec 2020 10:34:49 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/series/</guid><description>The term &amp;lsquo;series&amp;rsquo; may have different meanings on different sites or blog, but for this blog, a series is an ordered selection of posts.
When implementing series, I imposed some additional constraints (i.e. personal preferences based on my writing habits):
Posts within a series should have the URL path /series/&amp;lt;series-name&amp;gt;/&amp;lt;post-slug&amp;gt; Posts in a series should not appear on the /posts list page Every series should have its own series page at /series/&amp;lt;series-name&amp;gt;/ and it should show a list of all posts that belong to it Series posts should display in the correct order on the site and in the editor /series/ should list out a list of series pages, but not the series posts With these constraints in mind, let&amp;rsquo;s figure out how to implement series.</description></item><item><title>Creating Layout</title><link>https://sysfig.dev/series/static-sites-with-hugo/creating-layout/</link><pubDate>Mon, 14 Dec 2020 21:10:57 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/creating-layout/</guid><description>After Hugo has parsed your content file, it will then try to match the content with a layout from the layouts/ directory.
Hugo matches content with layout by a set of well-defined rules, documented on the Hugo&amp;rsquo;s Lookup Order page. We will examine these lookup rules more closely shortly; for now, just know that a layout file with the name index.html will match our Home page content and, together, generates a complete web page.</description></item><item><title>Parsing Content</title><link>https://sysfig.dev/series/static-sites-with-hugo/parsing-content/</link><pubDate>Mon, 14 Dec 2020 20:23:25 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/parsing-content/</guid><description>For any file that is not HTML, Hugo uses a parser to parse the content and convert it to HTML. For Hugo to be able to parse your content, you must use a supported content format (like Markdown). Hugo supports content written in Markdown or HTML out-of-the-box. Additional content formats are supported with the installation of additional tools on your machine (Hugo calls these tools external helpers).
Hugo determines the content format of a file based on a set of clues:</description></item><item><title>Creating Content</title><link>https://sysfig.dev/series/static-sites-with-hugo/creating-content/</link><pubDate>Mon, 14 Dec 2020 20:23:00 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/creating-content/</guid><description>Next, we are going to create some content to put on our home page. The content goes in the content/ directory and the name of the file will become the path on the final site. For example, if we add an content/about.md file, then a page at /about will be created.
You can create new content by running hugo new [contentPath], which will create a new content file based on a specific archetype (or the default one if none are specified).</description></item><item><title>Hello World</title><link>https://sysfig.dev/series/static-sites-with-hugo/hello-world/</link><pubDate>Mon, 14 Dec 2020 20:22:38 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/hello-world/</guid><description>Now you know, roughly, the purpose of each file and directory, let&amp;rsquo;s now work to create a simple home page. The home page we will create (and all other pages on the site) will have a common header navigation, a unique page body, and a common footer with social media links.
But first, let&amp;rsquo;s start by replacing the dummy values in the config.yaml.</description></item><item><title>themes/</title><link>https://sysfig.dev/series/static-sites-with-hugo/themes/</link><pubDate>Mon, 14 Dec 2020 20:22:17 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/themes/</guid><description>Instead of creating all your layouts, CSS files, icon sets, archetypes, etc. from scratch, you can download themes from themes.gohugo.io. You can also create your own theme.
In general, it&amp;rsquo;s a good practice to put the site/business-specific elements (e.g. logo) in the site&amp;rsquo;s layouts/ and static/ directories, whilst all the more generic elements in a theme, even if you don&amp;rsquo;t intend to publish it.
If you do decide to base our site on a third-party theme, you can override or extend a file in a theme by adding the same file to the archetypes, data/, layouts/, and static/ directories.</description></item><item><title>static/</title><link>https://sysfig.dev/series/static-sites-with-hugo/static/</link><pubDate>Mon, 14 Dec 2020 20:21:56 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/static/</guid><description>The static/ directory houses files which Hugo does not need to process such as CSS and JavaScript files, assets like images, audio and video files. Hugo will simply copy these files as-is to the site root.</description></item><item><title>archetypes/</title><link>https://sysfig.dev/series/static-sites-with-hugo/archetypes/</link><pubDate>Mon, 14 Dec 2020 20:21:32 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/archetypes/</guid><description>Chances are, your website or blog would have a limited number of content types. For a professional blog, you may have tutorials, opinion/discussion/analysis posts, announcements, etc. For a personal blog, it may be photography, food, travel, etc.
Posts of a similar type tend to have a similar structure (i.e. the same set of metadata and content structure). For example, all photography posts may share the metadata fields date, time, location, lat, lon, photographer.</description></item><item><title>content/</title><link>https://sysfig.dev/series/static-sites-with-hugo/content/</link><pubDate>Mon, 14 Dec 2020 20:21:14 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/content/</guid><description>Whilst the layouts/ directory houses HTML elements that can be reused across multiple web pages, the content/ directory houses content that are unique for that page. Examples include the content of an &amp;lsquo;About Us&amp;rsquo; page, or the content of a blog post.
A file in content/ consists of two parts - the first is a structured, YAML-formatted metadata block (called front matter), and the second is some unstructured content.
The YAML metadata block is enclosed in a pair of triple hyphens (---) and can be used to store named pieces of data like title, draft, author, etc.</description></item><item><title>layouts/</title><link>https://sysfig.dev/series/static-sites-with-hugo/layouts/</link><pubDate>Mon, 14 Dec 2020 20:20:56 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/layouts/</guid><description>The layouts/ directory holds the HTML files that defines the semantic structure and common elements of a web page. In this directory, you may expect to find files like header.html, footer.html, post.html, list.html etc.</description></item><item><title>config.toml</title><link>https://sysfig.dev/series/static-sites-with-hugo/config-toml/</link><pubDate>Mon, 14 Dec 2020 20:20:48 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/config-toml/</guid><description>To start off, we have the config.toml configuration file.
baseURL = &amp;#34;http://example.org/&amp;#34; languageCode = &amp;#34;en-us&amp;#34; title = &amp;#34;My New Hugo Site&amp;#34; config.toml holds variables that can be used in all templates. Typically, these would be site-specific information like the site&amp;rsquo;s name, canonical domain name, language code, theme, etc.
By default, the configuration is written in Tom&amp;rsquo;s Obvious, Minimal Language (TOML), named after Tom Preston-Werner, the co-founder of GitHub and Jekyll. But if you&amp;rsquo;re like me and prefer to write configuration files in YAML Ain&amp;rsquo;t Markup Language (YAML), then you can delete the whole directory and re-create the site using the --format option in the hugo new site command.</description></item><item><title>data/</title><link>https://sysfig.dev/series/static-sites-with-hugo/data/</link><pubDate>Mon, 14 Dec 2020 20:20:26 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/data/</guid><description>There may be portions of your layout that has a list structure. For example, for a developer&amp;rsquo;s personal blog, their projects/ page may be a list of GitHub repositories. Whilst you can copy and paste the same HTML template for every list item, it&amp;rsquo;ll be more DRY to have a single HTML snippet and use a loop to iterate over the list of repositories.
This is what the data/ directory is for - it allows you to store data in JSON, YAML, or TOML, and inject the data into layouts.</description></item><item><title>Generating a Project Scaffold</title><link>https://sysfig.dev/series/static-sites-with-hugo/generating-a-project-scaffold/</link><pubDate>Mon, 14 Dec 2020 17:52:52 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/generating-a-project-scaffold/</guid><description>Let&amp;rsquo;s create a scaffold for a new site using the hugo new site &amp;lt;path&amp;gt; command.
$ hugo new site sysfig.dev Congratulations! Your new Hugo site is created in /Users/sysfig/projects/sysfig.dev. Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command. 2. Perhaps you want to add some content.</description></item><item><title>Installing Hugo</title><link>https://sysfig.dev/series/static-sites-with-hugo/installing-hugo/</link><pubDate>Mon, 14 Dec 2020 17:52:37 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/installing-hugo/</guid><description>Hugo comes in two versions - regular and extended. The extended version provides support for:
Asset management CSS preprocessing - Sass Although Hugo is available as a single binary, the recommended approach for normal, human-centric usage is still to use a package manager (like Homebrew for macOS). This is because it makes it easier to upgrade. With a binary, you&amp;rsquo;d basically have to follow the same installation process and replace the old binary with the new.</description></item><item><title>Concepts</title><link>https://sysfig.dev/series/static-sites-with-hugo/concepts/</link><pubDate>Mon, 14 Dec 2020 17:52:24 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/concepts/</guid><description>As with all frameworks, Hugo imposes a set of conventions and rules. Learning them requires time but the hope is that, in the long run, these conventions would make updating and maintaining your site easier.
In general, Hugo uses sensible defaults and most things can be overriden.</description></item><item><title>Hugo vs Other Static Site Generators</title><link>https://sysfig.dev/series/static-sites-with-hugo/hugo-vs-other-static-site-generators/</link><pubDate>Mon, 14 Dec 2020 17:07:12 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/hugo-vs-other-static-site-generators/</guid><description>This book is about Hugo. But Hugo is not the only static site generator out there. So what makes Hugo so different? Before we go into that, let&amp;rsquo;s first talk about the features you can expect from any decent static site generators:
Templating - HTML templates that includes placeholders for styles and content. You may have a template for blog posts and another for static pages, but both rendered inside a main template that includes a header and footer.</description></item><item><title>Static vs Dynamic Sites</title><link>https://sysfig.dev/series/static-sites-with-hugo/static-vs-dynamic-sites/</link><pubDate>Mon, 14 Dec 2020 17:07:12 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/static-vs-dynamic-sites/</guid><description>Some open-source blogging software like WordPress and Ghost store post data (content and metadata) as database entries, and retrieve them dynamically at the time clients request them. For example, if a visitor navigates to a post on a Ghost blog using the URL https://blog.example.com/explaining-dns, the Ghost backend would take the path (/explaining-dns) and try to match it to an entry in the database. Once found, it will either return the post data to the front-end to display, or generate the HTML page server-side and respond with the dynamically-generated HTML page.</description></item><item><title>Introduction</title><link>https://sysfig.dev/series/static-sites-with-hugo/introduction/</link><pubDate>Mon, 14 Dec 2020 17:00:14 -0800</pubDate><guid>https://sysfig.dev/series/static-sites-with-hugo/introduction/</guid><description>Hugo is an open-source static site generator.</description></item></channel></rss>